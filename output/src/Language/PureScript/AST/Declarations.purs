-- File auto generated by purescript-bridge! --
module Language.PureScript.AST.Declarations where

import Data.Either (Either)
import Data.Eq (class Eq1)
import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import Data.Tuple.Nested (Tuple3)
import GHC.Base (NonEmpty)
import GHC.Integer.Type (Integer)
import Language.PureScript.AST.Binders (Binder)
import Language.PureScript.AST.SourcePos (SourceSpan)
import Language.PureScript.Comments (Comment)
import Language.PureScript.Environment (DataDeclType, FunctionalDependency, NameKind)
import Language.PureScript.Names (ClassName, TypeName, Ident, ModuleName, ProperName, Qualified)
import Language.PureScript.Types (Constraint, Type)
import Prim (Array, String)

import Prelude

data Module
  = Module SourceSpan (Array Comment) ModuleName (Array Declaration) (Maybe (Array DeclarationRef))


derive instance genericModule :: Generic Module _
--------------------------------------------------------------------------------
_Module :: Prism' Module { a :: SourceSpan
                         , b :: Array Comment
                         , c :: ModuleName
                         , d :: Array Declaration
                         , e :: Maybe (Array DeclarationRef) }
_Module = prism' (\{ a, b, c, d, e } -> Module a b c d e) f
  where
    f (Module a b c d e) = Just $ { a: a, b: b, c: c, d: d, e: e }
--------------------------------------------------------------------------------
data Declaration
  = DataDeclaration (Tuple SourceSpan (Array Comment)) DataDeclType (ProperName 'TypeName) (Array (Tuple String (Maybe (Type (Tuple SourceSpan (Array Comment)))))) (Array DataConstructorDeclaration)
  | DataBindingGroupDeclaration (NonEmpty Declaration)
  | TypeSynonymDeclaration (Tuple SourceSpan (Array Comment)) (ProperName 'TypeName) (Array (Tuple String (Maybe (Type (Tuple SourceSpan (Array Comment)))))) (Type (Tuple SourceSpan (Array Comment)))
  | KindDeclaration (Tuple SourceSpan (Array Comment)) KindSignatureFor (ProperName 'TypeName) (Type (Tuple SourceSpan (Array Comment)))
  | RoleDeclaration RoleDeclarationData
  | TypeDeclaration TypeDeclarationData
  | ValueDeclaration (ValueDeclarationData (Array GuardedExpr))
  | BoundValueDeclaration (Tuple SourceSpan (Array Comment)) Binder Expr
  | BindingGroupDeclaration (NonEmpty (Tuple3 (Tuple (Tuple SourceSpan (Array Comment)) Ident) NameKind Expr))
  | ExternDeclaration (Tuple SourceSpan (Array Comment)) Ident (Type (Tuple SourceSpan (Array Comment)))
  | ExternDataDeclaration (Tuple SourceSpan (Array Comment)) (ProperName 'TypeName) (Type (Tuple SourceSpan (Array Comment)))
  | FixityDeclaration (Tuple SourceSpan (Array Comment)) (Either ValueFixity TypeFixity)
  | ImportDeclaration (Tuple SourceSpan (Array Comment)) ModuleName ImportDeclarationType (Maybe ModuleName)
  | TypeClassDeclaration (Tuple SourceSpan (Array Comment)) (ProperName 'ClassName) (Array (Tuple String (Maybe (Type (Tuple SourceSpan (Array Comment)))))) (Array (Constraint (Tuple SourceSpan (Array Comment)))) (Array FunctionalDependency) (Array Declaration)
  | TypeInstanceDeclaration (Tuple SourceSpan (Array Comment)) (Array Ident) Integer Ident (Array (Constraint (Tuple SourceSpan (Array Comment)))) (Qualified (ProperName 'ClassName)) (Array (Type (Tuple SourceSpan (Array Comment)))) TypeInstanceBody


derive instance genericDeclaration :: Generic Declaration _
--------------------------------------------------------------------------------
_DataDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                       , b :: DataDeclType
                                       , c :: ProperName 'TypeName
                                       , d :: Array (Tuple String (Maybe (Type (Tuple SourceSpan (Array Comment)))))
                                       , e :: Array DataConstructorDeclaration }
_DataDeclaration = prism' (\{ a, b, c, d, e } -> DataDeclaration a b c d e) f
  where
    f (DataDeclaration a b c d e) = Just $ { a: a, b: b, c: c, d: d, e: e }
    f _ = Nothing

_DataBindingGroupDeclaration :: Prism' Declaration (NonEmpty Declaration)
_DataBindingGroupDeclaration = prism' DataBindingGroupDeclaration f
  where
    f (DataBindingGroupDeclaration a) = Just $ a
    f _ = Nothing

_TypeSynonymDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                              , b :: ProperName 'TypeName
                                              , c :: Array (Tuple String (Maybe (Type (Tuple SourceSpan (Array Comment)))))
                                              , d :: Type (Tuple SourceSpan (Array Comment)) }
_TypeSynonymDeclaration = prism' (\{ a, b, c, d } -> TypeSynonymDeclaration a
b
c
d) f
  where
    f (TypeSynonymDeclaration a b c d) = Just $ { a: a, b: b, c: c, d: d }
    f _ = Nothing

_KindDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                       , b :: KindSignatureFor
                                       , c :: ProperName 'TypeName
                                       , d :: Type (Tuple SourceSpan (Array Comment)) }
_KindDeclaration = prism' (\{ a, b, c, d } -> KindDeclaration a b c d) f
  where
    f (KindDeclaration a b c d) = Just $ { a: a, b: b, c: c, d: d }
    f _ = Nothing

_RoleDeclaration :: Prism' Declaration RoleDeclarationData
_RoleDeclaration = prism' RoleDeclaration f
  where
    f (RoleDeclaration a) = Just $ a
    f _ = Nothing

_TypeDeclaration :: Prism' Declaration TypeDeclarationData
_TypeDeclaration = prism' TypeDeclaration f
  where
    f (TypeDeclaration a) = Just $ a
    f _ = Nothing

_ValueDeclaration :: Prism' Declaration (ValueDeclarationData (Array GuardedExpr))
_ValueDeclaration = prism' ValueDeclaration f
  where
    f (ValueDeclaration a) = Just $ a
    f _ = Nothing

_BoundValueDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                             , b :: Binder
                                             , c :: Expr }
_BoundValueDeclaration = prism' (\{ a, b, c } -> BoundValueDeclaration a b c) f
  where
    f (BoundValueDeclaration a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

_BindingGroupDeclaration :: Prism' Declaration (NonEmpty (Tuple3 (Tuple (Tuple SourceSpan (Array Comment)) Ident) NameKind Expr))
_BindingGroupDeclaration = prism' BindingGroupDeclaration f
  where
    f (BindingGroupDeclaration a) = Just $ a
    f _ = Nothing

_ExternDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                         , b :: Ident
                                         , c :: Type (Tuple SourceSpan (Array Comment)) }
_ExternDeclaration = prism' (\{ a, b, c } -> ExternDeclaration a b c) f
  where
    f (ExternDeclaration a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

_ExternDataDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                             , b :: ProperName 'TypeName
                                             , c :: Type (Tuple SourceSpan (Array Comment)) }
_ExternDataDeclaration = prism' (\{ a, b, c } -> ExternDataDeclaration a b c) f
  where
    f (ExternDataDeclaration a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

_FixityDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                         , b :: Either ValueFixity TypeFixity }
_FixityDeclaration = prism' (\{ a, b } -> FixityDeclaration a b) f
  where
    f (FixityDeclaration a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ImportDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                         , b :: ModuleName
                                         , c :: ImportDeclarationType
                                         , d :: Maybe ModuleName }
_ImportDeclaration = prism' (\{ a, b, c, d } -> ImportDeclaration a b c d) f
  where
    f (ImportDeclaration a b c d) = Just $ { a: a, b: b, c: c, d: d }
    f _ = Nothing

_TypeClassDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                            , b :: ProperName 'ClassName
                                            , c :: Array (Tuple String (Maybe (Type (Tuple SourceSpan (Array Comment)))))
                                            , d :: Array (Constraint (Tuple SourceSpan (Array Comment)))
                                            , e :: Array FunctionalDependency
                                            , f :: Array Declaration }
_TypeClassDeclaration = prism' (\{ a, b, c, d, e, f } -> TypeClassDeclaration a
b
c
d
e
f) f
  where
    f (TypeClassDeclaration a b c d e f) = Just $ { a: a
                                                  , b: b
                                                  , c: c
                                                  , d: d
                                                  , e: e
                                                  , f: f }
    f _ = Nothing

_TypeInstanceDeclaration :: Prism' Declaration { a :: Tuple SourceSpan (Array Comment)
                                               , b :: Array Ident
                                               , c :: Integer
                                               , d :: Ident
                                               , e :: Array (Constraint (Tuple SourceSpan (Array Comment)))
                                               , f :: Qualified (ProperName 'ClassName)
                                               , g :: Array (Type (Tuple SourceSpan (Array Comment)))
                                               , h :: TypeInstanceBody }
_TypeInstanceDeclaration = prism' (\{ a,
b,
c,
d,
e,
f,
g,
h } -> TypeInstanceDeclaration a b c d e f g h) f
  where
    f (TypeInstanceDeclaration a b c d e f g h) = Just $ { a: a
                                                         , b: b
                                                         , c: c
                                                         , d: d
                                                         , e: e
                                                         , f: f
                                                         , g: g
                                                         , h: h }
    f _ = Nothing
--------------------------------------------------------------------------------
